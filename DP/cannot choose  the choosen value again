 /*A magician has various spells.

You are given an array power, where each element represents the damage of a spell. Multiple spells can have the same damage value.

It is a known fact that if a magician decides to cast a spell with a damage of power[i], they cannot cast any spell with a damage of power[i] - 2, power[i] - 1, power[i] + 1, or power[i] + 2.

Each spell can be cast only once.

Return the maximum possible total damage that a magician can cast.
*/


// ultimately what it ment that 
// once a value is coosen it's +-1 , +- 2 will not be choooosen from the array

#include<bits/stdc++.h>
using namespace std;

class Solution {
public:
    long long maxTotalDamage(vector<int>& power) {
    long long dp[100001] = {0}, max_dp = 0;
    sort(begin(power), end(power));
    for (int i = 0, j = 0; i < power.size(); ++i)        
        if (power[i] == power[max(0, i - 1)])
            dp[i + 1] = power[i] + dp[i];
        else {
            while(power[j] + 2 < power[i])
                max_dp = max(max_dp, dp[++j]);
            dp[i + 1] = power[i] + max_dp;
        }
    return *max_element(begin(dp), begin(dp) + power.size() + 1);
}
};


int main(){

    Solution obj;

    vector<int> power={2,2,3,5,4,6,7,8};

    cout<<obj.maxTotalDamage(power);
    
    
}
